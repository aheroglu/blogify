[
    {
      "title": "“Good Commit” vs “Your Commit”",
      "key": "“good-commit”-vs-“your-commit”",
      "description": "A good commit shows whether a developer is a good collaborator — Peter Hutterer, Linux.",
      "content": "<p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Years ago, I never realized there were specific rules for writing commit messages until my curiosity got the best of me. I used to think that straightforward messages like “added feature 2,” “fixed the bug on the Main Navigation bar,” or even “foo” were sufficient. The conviction that commit messages went largely unread proved mistaken. In reality, well-crafted commit messages are indispensable, ensuring that our future selves benefit from our diligence and thoughtfulness.</span></p><p class=\"ql-align-center\"><strong class=\"ql-font-monospace ql-size-large\"><em>Contents:</em></strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;</span><a href=\"https://levelup.gitconnected.com/good-commit-vs-your-commit-how-to-write-a-perfect-git-commit-message-6e96ab6357fa#5348\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>Why you should care</em></a><em class=\"ql-font-monospace ql-size-large\">&nbsp;|&nbsp;</em><a href=\"https://levelup.gitconnected.com/good-commit-vs-your-commit-how-to-write-a-perfect-git-commit-message-6e96ab6357fa#d046\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>Common Mistakes</em></a><em class=\"ql-font-monospace ql-size-large\">&nbsp;|&nbsp;</em><a href=\"https://levelup.gitconnected.com/good-commit-vs-your-commit-how-to-write-a-perfect-git-commit-message-6e96ab6357fa#a561\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>The 7 Rules</em></a><em class=\"ql-font-monospace ql-size-large\">&nbsp;|&nbsp;</em><a href=\"https://levelup.gitconnected.com/good-commit-vs-your-commit-how-to-write-a-perfect-git-commit-message-6e96ab6357fa#04b2\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>Case Study</em></a><em class=\"ql-font-monospace ql-size-large\">&nbsp;|&nbsp;</em><a href=\"https://levelup.gitconnected.com/good-commit-vs-your-commit-how-to-write-a-perfect-git-commit-message-6e96ab6357fa#946f\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>Tips</em></a><em class=\"ql-font-monospace ql-size-large\">.</em></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Why should we care about writing clean commit message?</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Commits serve as the tangible building blocks of a programmer’s craft. They act as the icing on the cake of code, and when written correctly, they bring substantial value. A well-written commit message becomes indispensable because they provide context — otherwise a commit message wouldn’t be needed at the first place.</span></p><blockquote class=\"ql-align-center\"><em class=\"ql-font-monospace ql-size-large\">A good commit shows weather a developer is a good collaborator — Peter Hutterer, Linux.</em></blockquote><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">A common mistake among developers is treating the Git repository as a backup system. Randomly committing to capture the current state of code can impede your ability to comprehend past changes when checking out the codebase in the future. Commit messages like “WIP”, “Off for lunch”, “End of code for today”, “I am tired AF”, “Happy Weekend Team”, and “First to commit” will only clutter your Git log, making it difficult to understand the essential commits you’ve made because none of these messages consists of any additional value.</span></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Here are some key mistakes to avoid when attempting to commit to a remote repository</span></h1><h2 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Never Commit Changes for Different Files Separately</span></h2><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Committing changes to different files separately might lead to problems when reviewing the commit history or collaborating with other team members. It becomes challenging to understand the complete context of the changes and their relationship to each other.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">For example, I am building an online store. What I shouldn’t ❌ do is:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"># Committing changes to header.js separately\ngit add header.js\ngit commit -m \"Improve header layout\"\n\n# Committing changes to footer.js separately\ngit add footer.js\ngit commit -m \"Optimize footer design\"\n</pre><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Reviewing your Git log, this kind of commit structure can become cluttered, especially as your commit history grows.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Commits should be clear, concise, and organized into logical units. For example, after completing the layout section of your code and working on the header and footer sections, it’s cleaner to combine these changes when you’re through with them before committing those changes:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"># Staging changes to both header.js and footer.js\ngit add header.js footer.js\n\n# Committing related changes together\ngit commit -m \"Enhance UI: Header and Footer Improvements\"\n</pre><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">I understand that it might sound easier in theory than in practice. That’s why it’s a good practice to maintain a private branch specifically for committing before consolidating those changes into your main branch through squashing.</span></p><h2 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Create a dedicated branch for private commits</span></h2><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Committing code doesn’t necessarily mean it has to become a permanent fixture in the endless expanse of your git log. Think of private branches as your personal programmer’s sketchpad — where you have the freedom to experiment without the concern of others scrutinizing your work.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Imagine scenarios: You’re in the middle of coding and need to step away for a quick break, or perhaps you’re heading for dinner. The fear of losing your current progress prompts you to commit your changes — perfect use cases for a private branch. Whether you’re wrapping up your coding session for the day or simply feel like making a spontaneous commit, these changes find their home in your private branch.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">commit [commit-hash]\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   [Timestamp]\n    WIP\n\ncommit [commit-hash]\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   [Timestamp]\n\n    commiting before i eventually lose my files\n\ncommit [commit-hash]\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   [Timestamp]\n\n    about to go for dinner\n\ncommit [commit-hash]\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   [Timestamp]\n\n    toilet time!\n</pre><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">In collaborative settings, it’s important to make the naming of your private branch obvious. Because you can’t afford to let these kind of commit messages show up in your Public Branches.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Whether through explicit branch naming or direct communication with your teammates, make it evident that the content of this branch isn’t intended as a basis for ongoing work. A good naming for your private branch can be:&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">`private/do-not-use-this`</strong></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Every commit that becomes part of your Public Branch must embody a well crafted, self-contained, reversible, and well-described unit of work.</span></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Case Study: Developing an Online Store’s Cart Feature</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Let’s take a look at the Online Store project that we’ve been developing. In this context, you serve as the front-end developer responsible for adding the cart feature to the store. Your journey unfolds as follows:</span></p><blockquote class=\"ql-align-center\"><em class=\"ql-font-monospace ql-size-large\">You initiated your efforts by enhancing the CSS presentation of the cart section and made a corresponding commit. As you advanced, you introduced JavaScript functionality to the cart, leading to another commit. In your pursuit of perfection, you noticed a text alignment issue and dedicated time to refine the CSS, followed by an additional commit.</em></blockquote><blockquote class=\"ql-align-center\"><em class=\"ql-font-monospace ql-size-large\">Continuing your work, you identified and resolved a bug related to the counter’s behavior when products were added to the cart. This swift fix was also captured in a commit. Finally, you sought to elevate the user experience by incorporating a loading animation upon clicking the checkout button, concluding with a conclusive commit.</em></blockquote><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Now let’s take a look at the git log:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">commit [commit-hash-1]\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   [Timestamp]\n\n    Enhance CSS presentation of cart section\n\ncommit [commit-hash-2]\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   [Timestamp]\n\n    Introduce Javascript functionality to cart\n\ncommit [commit-hash-3]\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   [Timestamp]\n\n    Refine CSS to resolve text alignment issue\n\ncommit [commit-hash-4]\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   [Timestamp]\n\n    Fix counter bug related to cart behavior\n\ncommit [commit-hash-5]\nAuthor: Your Name &lt;your.email@example.com&gt;\nDate:   [Timestamp]\n\n    Incorporate loading animation for checkout button\n</pre><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">If these changes need to be incorporated into the main feature branch along with other commits related to the online store, the review process could become challenging.</span></p><h2 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Here is how to fix these logs of commit</span></h2><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Start by switching to your feature branch:</span></p><p class=\"ql-align-center\"><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"># Checkout the feature branch named feature/cart-section\ngit checkout feature/cart-section\n</pre><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Then, squash all commits from your&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">private/do-not-use-this</code><span class=\"ql-font-monospace ql-size-large\">branch into&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">feature/cart-section</code><span class=\"ql-font-monospace ql-size-large\">using a single commit message:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"># Merge and squash all commits from the private branch to the feature branch using a single commit\ngit merge - squash private/do-not-use-this\n</pre><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">After merging and squashing, you’ll need to craft a clear and descriptive commit message:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"># Write your detailed commit message\ngit commit -v -m \"Feat: Create the Cart Feature with a Nice Animation\n\nEnhanced the CSS layout of the cart section, addressing text\nalignment issues and refining the layout for improved aesthetics\nand readability.\n\"\n</pre><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">7 Standard Rules to writing a perfect commit message</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">These rules provide guidelines and best practices to ensure that your commit messages are properly formatted and convey clear information. While the specific rules may vary based on different sources, the general aim is to enhance the readability and understandability of commit messages within the Git version control system.</span></p><h2 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Rule 1: Limit Subject to 50 Characters (Max).</span></h2><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">When crafting the subject line of a commit message, it’s advisable to keep it concise and focused. The subject line serves as a quick summary of the commit’s purpose and should ideally be limited to a maximum of 50 characters.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Struggling to fit within the 50-character limit can be indicative of a lack of clarity about the commit’s intent. Commit messages should be clear, concise, and able to stand on their own. By adhering to this character limit, you’re forced to prioritize the most critical information, making it easier for your team and your future self to understand the nature of the change at a glance.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">git commit -v -m \"create the Cart Feature with a Nice Animation.\"\n</pre><h2 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Rule 2: Capitalize only the first letter of the subject line.</span></h2><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">When composing a commit message, employ title case by capitalizing the first letter of the subject line, just like writing a concise sentence. Leave the rest of the message, including any additional details, in lowercase.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">git commit -v -m \"Create the Cart Feature with a Nice Animation.\"\n</pre><h2 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Rule 3: Don’t put a period at the end of the subject line</span></h2><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">When composing a commit message, employ title case by capitalizing the first letter of the subject line, just like writing a concise sentence. Leave the rest of the message, including any additional details, in lowercase.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">git commit -v -m \"Create the Cart Feature with a Nice Animation\"\n</pre><h2 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Rule 4: Put a blank line between the Subject line and the body</span></h2><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">While this guideline might appear unusual, it’s rooted in practicality. Many developers employ command-line interfaces for Git, which often lack automatic word wrapping. Consequently, intentional formatting rules have been introduced to ensure consistent and legible commit messages.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">git commit -v -m \"Create the Cart Feature with a Nice Animation\n\nBody...\n\"\n</pre><h2 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Rule 5: Wrap Lines at 72 Characters for the Commit Body</span></h2><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">It’s important to clarify that adhering to this guideline isn’t about traditional word wrapping; instead, this practice arises from the consideration that command-line users might experience truncated commit bodies beyond 72 characters.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">For bullet points, remember to use a hyphen or asterisk, followed by a single space. Additionally, ensure you maintain a hanging indent for organizational clarity.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">git commit -v -m \"Create the Cart Feature with a Nice Animation\n\nEnhanced the CSS layout of the cart section, addressing text\nalignment issues and refining the layout for improved aesthetics\nand readability.\"\n</pre><h2 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Rule 6: Use the Imperative mood</span></h2><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">A valuable practice involves crafting commit messages with the underlying understanding that the commit, when implemented, will achieve a precise action. Construct your commit message in a manner that logically completes the sentence&nbsp;</span><em class=\"ql-font-monospace ql-size-large\">“If applied, this commit will…”.</em><span class=\"ql-font-monospace ql-size-large\">&nbsp;For instance, rather than,</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">git commit -m \"Fixed the bug on the layout page\"</code><span class=\"ql-font-monospace ql-size-large\">&nbsp;❌, use this&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">git commit -m \"Fix the but on the layout page\"</code><span class=\"ql-font-monospace ql-size-large\">&nbsp;✔</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">In other words, if this commit were to be applied, it would indeed fix the bug on the layout page.</span></p><h2 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Rule 7: Explain “What” and “Why”, but not “How”.</span></h2><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Limiting commit messages to “what” and “why” creates concise yet informative explanations of each change. Developers seeking “How” the code was implemented can refer directly to the codebase. Instead, highlight what was altered and the rationale for the change, including which component or area was affected.</span></p><h2 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Case Study: Angular’s Commit Message Practices</span></h2><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Angular stands as a prominent illustration of effective commit messaging practices. The Angular team advocates for the use of specific prefixes when crafting commit messages. These prefixes include “chore,” “docs,” “style,” “feat,” “fix,” “refactor,” and “test.” By incorporating these prefixes, the commit history becomes a valuable resource for understanding the nature of each commit.</span></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Tips</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Remember to prioritize clear and meaningful communication through your commit messages. A well-crafted commit message serves as a story that explains ‘what,’ ‘why,’ and ‘how’ a change was made. Remember, your commit history is a collaborative resource that future you and your team will rely on. Make it a habit to create commit messages that stand as informative, concise, and consistent narratives.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Interested in deepening your understanding of Git and evolving into a proficient “version controller”? Explore these exceptional resources:</span></p><blockquote class=\"ql-align-center\"><a href=\"https://git-scm.com/doc\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>https://git-scm.com/doc</em></a></blockquote><blockquote class=\"ql-align-center\"><a href=\"https://git-scm.com/book/en/v2\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>https://git-scm.com/book/en/v2</em></a></blockquote><blockquote class=\"ql-align-center\"><a href=\"https://lab.github.com/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>https://lab.github.com/</em></a></blockquote><blockquote class=\"ql-align-center\"><a href=\"https://www.atlassian.com/git/tutorials\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>https://www.atlassian.com/git/tutorials</em></a></blockquote><blockquote class=\"ql-align-center\"><a href=\"https://learngitbranching.js.org/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>https://learngitbranching.js.org/</em></a></blockquote><blockquote class=\"ql-align-center\"><a href=\"https://www.gitkraken.com/git-cheat-sheet\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>https://www.gitkraken.com/git-cheat-sheet</em></a></blockquote><blockquote class=\"ql-align-center\"><a href=\"https://www.git-tower.com/learn/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><em>https://www.git-tower.com/learn/</em></a></blockquote><blockquote class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">See you again…</span></blockquote><p><br></p>",
      "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*ZHn1-9eTq-u47gUpYGMiZQ.png",
      "viewCount": 0,
      "isPublished": true,
      "createdDate": "2023-09-05T22:27:13.3227495"
    },
    {
      "title": "Graphic Design for Engineers and Architects",
      "key": "graphic-design-for-engineers-and-architects",
      "description": "It’s no secret that engineers have a certain “style” for their graphic designs",
      "content": "<p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">You might be the author of such a diagram and see nothing wrong. It’s all there — the services, arrows, some protocol information, etc. You understand it well because you drew it, but your audience, they’re looking at a dozen or so beige boxes within a bird’s nest of tangled arrows. Let’s make your diagrams as clean as your code and turn them into something like this:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*1oK4kNkoys6PlkfsWN7I-w.png\" height=\"1059\" width=\"1000\"></span></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Why Graphic Design Matters in Software Design</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The age-old saying, “a picture is worth 1000 words,” still rings true today, especially within technical settings. As a software engineer or architect, your role is to effectively communicate a technical solution to other engineers, leadership, customers, etc.&nbsp;The more information you can communicate within a diagram, the less you need to explain it using words.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Instead of writing or saying,</span></p><blockquote class=\"ql-align-center\"><em class=\"ql-size-large ql-font-monospace\">“The browser makes a request to the APIGW, which will then proxy the request to one or more backend services.”</em></blockquote><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">why not just visualize it?</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:214/1*RMHm8aRDXLCWS5JnMSvMow.png\" height=\"468\" width=\"214\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">A diagram also illustrates the final solution, including all the components involved, i.e., the “big picture.”</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:585/1*hWVnwhfMdUO-XbVPSW1qAA.png\" height=\"487\" width=\"585\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">And most importantly, it can give your solution a “perceived quality.” In other words, if it looks good, people will think it’s good, even if it’s a bad idea.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*p9MBFDRCcNBnbX4eP1pC_A.png\" height=\"334\" width=\"700\"></span></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">What is Bad Design?</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Looking again at the first diagram, the unflattering aspects, i.e., the “bad” parts of the design, are:</span></p><ul><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Lack of focus. All elements use default colors, lines, etc.</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Messy lines. Effort is required to follow lines through the diagram.</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">No clear relationships. Which components are similar, and which are clearly unique?</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">No clear flow. What is the primary flow through the architecture, what’s secondary, etc.?</span></li></ul><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Creating a Better Diagram</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Let’s take this bad design and build it into the end result and uncover more benefits to caring about design and communicating visually in your work.</span></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Alignment and composition</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The first step in taking a bad diagram and making it better is to clean up the alignment and composition. Do your best to align elements to each other and remove unnecessary line crossings by “untangling” the diagram.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*5XAdsD_NG_jdGNpIWHaKdQ.png\" height=\"526\" width=\"700\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Here’s what it looks like when you apply these changes to the bigger picture:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*YOCx0767NYo98INffkf3fQ.png\" height=\"813\" width=\"700\"></span></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Color and meaning</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Color is an important aspect of your diagram. It can communicate relationships between components, “Unity,” or signify certain components are unique.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">In addition, I always strive to make the box or component of the diagram the same color as the technology or company it represents.</span></p><blockquote class=\"ql-align-center\"><em class=\"ql-size-large ql-font-monospace\">Redis is red, containers are blue. I color my boxes, and so should you.</em></blockquote><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*6MGzUQNvrR4vEx1-PfSAsg.png\" height=\"156\" width=\"700\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Here’s what it looks like to apply color to the bigger picture:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*j4ZfIDHqKVPIyRhl2b-ggg.png\" height=\"852\" width=\"700\"></span></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Using shapes effectively</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Shapes also play a critical aspect, just like color. They can unify or isolate certain components of your design. It’s also important not to degrade your design by introducing mixed styles.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*vkgfGEi8YJqGH3oZ5m-kCg.png\" height=\"257\" width=\"700\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">If your design is very “flat,” digging out that old user icon in Viso may seem tempting, but it’s much better if you find one that suits your diagram better.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:595/1*i2FedG4tNr5dwbYfL3zA8g.png\" height=\"130\" width=\"595\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Here’s how to apply effective shapes to the big picture:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*wFpvTWgMOB5-Gv6g1796UA.png\" height=\"802\" width=\"700\"></span></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Visual flow, leading the eye</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">If your diagram is complex and has many interactions, a primary or main flow should always be highlighted. It usually originates at the customer or end user and terminates at what they want, such as the data.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Using bolder, more vivid lines will show the viewers that you want to highlight a primary flow through the solution. Here is an example of a load balancer that balances between a primary and a secondary site:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*pfuI4Un0acs2GScdcBIRRg.png\" height=\"1015\" width=\"700\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">And this is what it looks like when you apply it to the big picture:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*RO9u1Rc8oyDEohw_H5XUyg.png\" height=\"837\" width=\"700\"></span></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Skeuomorphism in design</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">(Making it resemble the thing it represents)</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Skeuomorphism is a nifty design technique to provide familiarity to a user or viewer. A prime example is when you open the notepad app on an iPhone; it looks like an actual notepad that is familiar to you.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">You can convey familiarity within your design by turning boxes into more real-world/conceptual representations.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">For example, if it’s a server, make it look like a server. If it’s Kubernetes, well, Kubernetes is a platform developers deploy containers “onto,” so a flat table with squares can help convey that.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*gq3ry2NfEFcqvf5m0vXIxg.png\" height=\"644\" width=\"700\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Here’s how skeuomorphism looks when applied to the bigger picture:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*1gMn25RHrhTvCj1u0psuCw.png\" height=\"860\" width=\"700\"></span></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Constructing your own shapes</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Often, you’re working within a very basic application such as PowerPoint, Viso, Gify, etc. These programs may not have what you’re looking for, or if they do, it doesn’t go with your style.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">You can easily create your own shapes and icons using just basic shapes.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*NajLSIaYWxLY8rwHk1doHQ.png\" height=\"410\" width=\"700\"></span></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Representing planned and future state</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">As time progresses, your solution may change between presentations. You will want to add new components or changes to your diagram, but it’s important to ensure these new items or components, which don’t yet exist, are visually represented well. Here are a few ways of doing that:</span></p><ul><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Utilize dotted lines for flow and shape lines to represent things that aren’t built yet.</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Avoid coloring new services the same as existing ones. Use a slightly lighter shade.</span></li></ul><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*qPRqEz5kxj36MEtuYWkAZg.png\" height=\"888\" width=\"700\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Let’s add this new component to our existing solution:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*sfHaTikyRQ0AutgfukmkWw.png\" height=\"758\" width=\"700\"></span></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Forcing focus</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">When you want to force your audience to focus on a specific part of your solutions, you can gray out everything except for your focal point.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">This is great when doing a presentation. You show the solution, click on the next slide, and then highlight something very specific so there’s no question of where your attention is. Once done talking about it, you can “turn the color back on” and show a normal diagram going forward.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*YK5bzVo7madfz5vFfnIbKQ.png\" height=\"758\" width=\"700\"></span></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Annotations and comments</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Comments and annotations can provide another layer of detail alongside your visuals. Adding additional, yet subtle, information allows your diagram to do more talking for you. It also allows your audience to dive deeper if they want to or ignore them completely if they don’t need that level of information.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Comments and annotations should not be pure black; it’s better to use a mid-gray or something subtle to not draw too much attention.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Here’s how they can be applied:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*TNHAJ3mlKfBw8C_2F-AOhQ.png\" height=\"1024\" width=\"1000\"></span></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Relating Work Efforts to Diagrams</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">We often take a completed design and create Epics, Features, and Stories from them within some Agile process. As a lead engineer, I like to go further and bring Agile back into the diagrams by circling key parts and tagging them with an Epic, Feature, or Story.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Doing this provides clarity as to what work efforts are related to what part of the solution, and as a lead, I can easily “carve up” a diagram into work for other developers.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*BSLxVClsvBmNqdgaiA99tQ.png\" height=\"499\" width=\"1000\"></span></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">More Design Tips</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Here are additional design tips for you to incorporate into your diagrams:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*GSkubGDNgTqkOYIXzq7KXQ.png\" height=\"507\" width=\"1000\"></span></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Different diagram types I use</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:1000/1*vDLO2lfC5I-U3baD5G9JzA.png\" height=\"543\" width=\"1000\"></span></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Conclusion</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">I hope you’ve learned some ways to make your next designs stand out when you’re presenting to your colleagues, peers, or leadership.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Design can communicate quality, care to detail, and other positive attributes you will want your software to be associated with before you even pick up the code editor.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Finally, using design to bring the Agile process back into your diagrams allows you to clear up confusion, find gaps in your planning sessions and leave your developers confident in understanding where their work fits within the “big picture.”</span></p><p><br></p>",
      "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*nuGBE87Z2owGSGI5M2CVGg.png",
      "viewCount": 0,
      "isPublished": true,
      "createdDate": "2023-09-05T22:23:54.0985746"
    },
    {
      "title": "Open-Source Software Composition Analysis Tool",
      "key": "open-source-software-composition-analysis-tool",
      "description": "I would like to present how it can be configured using popular open-source projects as examples.",
      "content": "<h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Software Composition Analysis</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Software Composition Analysis (SCA) is a process that can aid developers and security engineers to effectively identify project’s dependencies and their open-source vulnerabilities during the Software Development Lifecycle. On the market there is a number of solutions that can be easily integrated with existing projects. Few examples of SCA solutions that can be used with more than one technology:</span></p><ul><li class=\"ql-align-center\"><a href=\"https://owasp.org/www-project-dependency-check/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">Dependency-Check</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;supported by OWASP</span></li><li class=\"ql-align-center\"><a href=\"https://github.com/google/osv-scanner\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">Google osv-scanner</a></li><li class=\"ql-align-center\"><a href=\"https://semgrep.dev/docs/semgrep-supply-chain/overview/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">Semgrep Supply Chain</a></li><li class=\"ql-align-center\"><a href=\"https://snyk.io/product/open-source-security-management/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">Snyk Open Source</a></li></ul><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Google osv-scanner</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Google osv-scanner is a Go based open-source SCA tool that can be used with a number of technologies such as&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">Python</strong><span class=\"ql-size-large ql-font-monospace\">,&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">Java</strong><span class=\"ql-size-large ql-font-monospace\">,&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">JavaScript</strong><span class=\"ql-size-large ql-font-monospace\">,&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">Go&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">and more. Additionally, it allows to perform a&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">container scanning&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">against&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">Debian&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">based images. It is using an open-source&nbsp;</span><a href=\"https://osv.dev/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">osv.dev</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;database for quering details about open-source vulnerabilities. The tool works effectively with lockfiles, dependency manifests and Software Bill of Materials (SBOMs).</span></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Configuring osv-scanner with Keras — Deep Learning For Humans Project</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Let’s jump to a case study where I present how this SCA solution can be used in a real life scenario. We will perform the scanning locally to understand its capabilities and have a background for enabling this SCA solution in CI/CD.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">I decided to use some popular project that is using&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">requirements.txt</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;to store project’s dependencies as a case study and&nbsp;</span><a href=\"https://github.com/keras-team/keras\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\"><strong>Keras</strong></a><strong class=\"ql-size-large ql-font-monospace\">&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">was chosen as a testing project.</span></p><blockquote class=\"ql-align-center\"><em class=\"ql-size-large ql-font-monospace\">Keras is a deep learning API written in Python, running on top of the machine learning platform&nbsp;</em><a href=\"https://github.com/tensorflow/tensorflow\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\"><em>TensorFlow</em></a><em class=\"ql-size-large ql-font-monospace\">. It was developed with a focus on enabling fast experimentation and providing a delightful developer experience.</em></blockquote><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Firstly, the SCA tool can be downloaded with the following command in Linux:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">wget https://github.com/google/osv-scanner/releases/download/v1.3.6/osv-scanner_1.3.6_linux_amd64\nchmod +x osv-scanner_1.3.6_linux_amd64\n</pre><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">More installation materials are included in the&nbsp;</span><a href=\"https://google.github.io/osv-scanner/installation/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">official documentation</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;and&nbsp;</span><a href=\"https://github.com/google/osv-scanner/releases\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">released binaries</a><span class=\"ql-size-large ql-font-monospace\">. Also, osv-scanner can be found in popular package managers.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Next, the scanning can be executed against a target directory or a specific lockfile. In our case we will use a&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">keras</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;directory containing our testing project which I already cloned.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">./osv-scanner_1.3.6_linux_amd64 keras/\n</pre><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The scanning output can be observed below:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*lgv45QkKb6Hvv0y_PtRbTA.png\" height=\"148\" width=\"700\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">SCA Scanning Results in a Default Table Form — osv-scanner Output</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The output is presented in a table format by default. This table presents such pieces of information as&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">OSV URL</strong><span class=\"ql-size-large ql-font-monospace\">&nbsp;to vulnerability details,&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">CVSS&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">score,&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">ecosystem&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">(package manager), affected&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">package</strong><span class=\"ql-size-large ql-font-monospace\">, its&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">version&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">and the&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">source&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">file where the dependency was identified. Furthermore, the tool also returns&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">non-zero exit code&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">when it detects vulnerabilities.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">This output is enough to assess the risk manually by following&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">OSV URL</strong><span class=\"ql-size-large ql-font-monospace\">. In this case, we can observe that Keras project returns two OSV URL:</span></p><ul><li class=\"ql-align-center\"><a href=\"https://osv.dev/GHSA-9jx5-6pgf-crrp\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">https://osv.dev/GHSA-9jx5-6pgf-crrp</a></li><li class=\"ql-align-center\"><a href=\"https://osv.dev/PYSEC-2023-102\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">https://osv.dev/PYSEC-2023-102</a></li></ul><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Actually, following URLs lets us understand that this is actually one vulnerability “Potential memory leak” having&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">CVE-2023–25399&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">number and CVSS score set to 5.5 which is considered as a medium severity issue.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Experienced engineers with security knowledge may decide that such vulnerability may be a low severity risk issue in their opinion and would need more data to assess the risk properly. How they could get more info from this tool? It’s rather easy with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">--format json</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;flag. Let’s see the output now:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">./osv-scanner_1.3.6_linux_amd64 --format json keras/\n</pre><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*zkG4mG_Vqu0rNc_WsLe5hQ.png\" height=\"538\" width=\"700\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">JSON Output Format From osv-scanner</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The JSON format presents much more data than table such as:</span></p><ul><li class=\"ql-align-center\"><strong class=\"ql-size-large ql-font-monospace\">Vulnerability published date</strong><span class=\"ql-size-large ql-font-monospace\">&nbsp;—&nbsp;</span><em class=\"ql-size-large ql-font-monospace\">2023–07–05T18:30:44Z;</em></li><li class=\"ql-align-center\"><strong class=\"ql-size-large ql-font-monospace\">Summary&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">—&nbsp;</span><em class=\"ql-size-large ql-font-monospace\">scipy memory leak vulnerability;</em></li><li class=\"ql-align-center\"><strong class=\"ql-size-large ql-font-monospace\">Details&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">—&nbsp;</span><em class=\"ql-size-large ql-font-monospace\">A refcounting issue which leads to potential memory leak was discovered in scipy commit 8627df31ab in `Py_FindObjects()` function.;</em></li><li class=\"ql-align-center\"><strong class=\"ql-size-large ql-font-monospace\">Affected version ranges</strong><span class=\"ql-size-large ql-font-monospace\">&nbsp;—&nbsp;</span><em class=\"ql-size-large ql-font-monospace\">&lt;1.9.3;</em></li><li class=\"ql-align-center\"><strong class=\"ql-size-large ql-font-monospace\">Fixed version</strong><span class=\"ql-size-large ql-font-monospace\">&nbsp;—&nbsp;</span><em class=\"ql-size-large ql-font-monospace\">1.10.0;</em></li><li class=\"ql-align-center\"><strong class=\"ql-size-large ql-font-monospace\">CVSS vector</strong><span class=\"ql-size-large ql-font-monospace\">&nbsp;—&nbsp;</span><em class=\"ql-size-large ql-font-monospace\">CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H;</em></li><li class=\"ql-align-center\"><strong class=\"ql-size-large ql-font-monospace\">CWE&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">—&nbsp;</span><em class=\"ql-size-large ql-font-monospace\">CWE-400;</em></li><li class=\"ql-align-center\"><strong class=\"ql-size-large ql-font-monospace\">Severity&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">—&nbsp;</span><em class=\"ql-size-large ql-font-monospace\">MODERATE;</em></li></ul><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Such data with some context information could be effectively used to assess the actual risk of this vulnerability.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">More interesting flags are:</span></p><ul><li class=\"ql-align-center\"><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">--recursive</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;— checks subdirectories for supported lockfiles</span></li><li class=\"ql-align-center\"><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">--experimental-call-analysis</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;— enables experimental call analysis that detects if the affected code is reachable</span></li><li class=\"ql-align-center\"><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">--docker</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;— scans Docker image with specified name</span></li></ul><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">It should be also noted that it’s possible to ignore specific vulnerabilities based on their IDs by using&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">--config config.toml</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;flag. Assuming that the detected vulnerability should be ignored by scanning mechanism, the following&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">config.toml</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;file can be created:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">[[IgnoredVulns]]\nid = \"GHSA-9jx5-6pgf-crrp\"\n# ignoreUntil = 2022-11-09 # Optional exception expiry date\nreason = \"Risk accepted for this type of issues as project is used only locally by one developer\"\n\n[[IgnoredVulns]]\nid = \"PYSEC-2023-102\"\n# ignoreUntil = 2022-11-09 # Optional exception expiry date\nreason = \"Risk accepted for this type of issues as project is used only locally by one developer\"\n</pre><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">What About Transitive Dependencies?</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">As you may know a majority of vulnerabilities are related with transitive dependencies which may not be included in a project dependencies directly but are pulled with them when dependency tree is resolved. Research performed by Snyk mentions that over&nbsp;</span><a href=\"https://snyk.io/blog/78-of-vulnerabilities-are-found-in-indirect-dependencies-making-remediation-complex/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\"><strong>78%</strong></a><span class=\"ql-size-large ql-font-monospace\">, and Endor Labs mentions that about&nbsp;</span><a href=\"https://www.forbes.com/sites/forbestechcouncil/2023/05/26/the-hidden-risk-lurking-in-the-software-supply-chain-transitive-open-source-dependencies/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\"><strong>95%</strong></a><span class=\"ql-size-large ql-font-monospace\">&nbsp;of&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">vulnerabilities, are coming from indirect dependencies</strong><span class=\"ql-size-large ql-font-monospace\">. Based on these numbers it becomes obvious that transitive dependencies needs to be also identified to assess the security risk properly.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">By default osv-scanner doesn’t resolve dependency tree of a project if it’s not already included in the scanned file. This problem may occur for dependencies declared in&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">requirements.txt</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;file&nbsp;</span><em class=\"ql-size-large ql-font-monospace\">(for Python)</em><span class=\"ql-size-large ql-font-monospace\">&nbsp;or in&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">pom.xml</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;</span><em class=\"ql-size-large ql-font-monospace\">(for Java)</em><span class=\"ql-size-large ql-font-monospace\">. On the other hand, this problem doesn’t exist if your project already is using&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">SBOM&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">or a package manager that resolves dependencies and stores them as some kind of a&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">lockfile</strong><span class=\"ql-size-large ql-font-monospace\">. For example with Poetry, this problem is solved with a&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">poetry.lock</code><strong class=\"ql-size-large ql-font-monospace\">&nbsp;</strong><span class=\"ql-size-large ql-font-monospace\">lockfile containing all of the direct and transitive dependencies installed within your project.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">As you can see transitive dependencies might be problematic for some cases and this is a downside of this tool in the context of using it out of the box directly in CI/CD pipeline.</span></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Let’s Scan Transitive Dependencies&nbsp;Too!</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">As I mentioned such dependencies can be resolved during CI/CD and stored in the SBOM file. Next, such file can be easily scanned with osv-scanner!</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">As SBOM is a topic for a different more comprehensive article let’s assume that in your environment you have already installed Keras dependencies. If you don’t have them installed already, you can install them with the following commands in a virtual environment:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"># create virtualenv for resolving dependencies\nvirtualenv -v .venv/ -p python3\nsource .venv/bin/activate\n\n# install dependencies\npip3 install -r keras/requirements.txt \n\n# dump installed dependencies to reqs_to_scan.txt\npip3 freeze &gt; requirements.txt\n\n# leave virtualenv\ndeactivate\n\n# perform SCA scan for direct and transitive dependencies\n./osv-scanner_1.3.6_linux_amd64 --lockfile requirements.txt\n</pre><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Now, osv-scanner presents the same findings but actually&nbsp;</span><strong class=\"ql-size-large ql-font-monospace\">63 packages</strong><span class=\"ql-size-large ql-font-monospace\">&nbsp;were scanned (</span><strong class=\"ql-size-large ql-font-monospace\">earlier 12 packages</strong><span class=\"ql-size-large ql-font-monospace\">):</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:685/1*76vUuvp4iHpTO3Ff6vmkGQ.png\" height=\"134\" width=\"685\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">SCA Scanning Results for Direct and Transitive Dependencies</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">By installing dependencies manually we were able to “resolve a dependency tree” and obtain a full list of packages to scan. In a similar way a dedicated Python&nbsp;</span><a href=\"https://github.com/pypa/pip-audit\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">pip-audit</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;vulnerability scanning tool works as it resolves dependencies by installing them in a dedicated environment.</span></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Keras is Python based, so what about a Java Project? Scanning Apache Spark.</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">I wouldn’t be myself if I didn’t present how osv-scanner is working with Java! I’ve chosen an&nbsp;</span><a href=\"https://github.com/apache/spark\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\"><strong>Apache Spark</strong></a><span class=\"ql-size-large ql-font-monospace\">&nbsp;project which is using&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">pom.xml</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;file to specify dependencies.</span></p><blockquote class=\"ql-align-center\"><em class=\"ql-size-large ql-font-monospace\">Apache Spark is a unified analytics engine for large-scale data processing. It provides high-level APIs in Scala, Java, Python, and R, and an optimized engine that supports general computation graphs for data analysis</em></blockquote><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The SCA scanning can be inititated in a similar way as previously using:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">./osv-scanner_1.3.6_linux_amd64 spark\n</pre><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The output is presented below:</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*nvaJk9n7pFlwiCZjl9zckA.png\" height=\"181\" width=\"700\"></span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">SCA Scanning Results for Apache Spark — osv-scanner Output</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">It should be noted that&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">pom.xml</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;may contain only direct dependencies. Currently, there is no generic way to scan both direct and transitive dependencies easily with osv-scanner. There are GitHub issues raised with questions about transitive dependencies like this one in context of Java:</span></p><ul><li class=\"ql-align-center\"><a href=\"https://github.com/google/osv-scanner/issues/35\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">Better support for transitive deps in Maven/Java (pom.xml) · Issue #35 · google/osv-scanner (github.com)</a></li></ul><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Based on the discussion, looks like SBOM is currently the best option to have ability to scan both direct and transitive dependencies. I believe it’s time to review tools and approaches for generating SBOM files 🤔.</span></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Summary</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">As you can see osv-scanner can be a great fit to identify security vulnerabilities in direct open-source dependencies. However in some cases it needs an additional effort in configuring projects to obtain a full picture of all of the direct and transitive dependencies installed with your project.</span></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Pros:</span></h2><ul><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">It’s free and an open-source solution;</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">It uses a reliable source of open-source vulnerabilities;</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">It can be configured for a number of technologies;</span></li></ul><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Cons:</span></h2><ul><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">At large scale it may require a significant amount of effort to adjust projects to fully utilize its power. Introducing SBOMs looks like the most effective solution to this problem.</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">No risk or prioritization details provided. It should be noted that CVSS is not great for assessing them properly. As a result non experienced security engineers may end up with a number of high/critical vulnerabilities which don’t pose a major security risk in their environments.</span></li></ul><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Still, taking into account advantages if you don’t have any SCA solution in place yet I can recommend this one! Furthermore, it looks like the tool is still evolving and more features might be implemented over a time such as ability to scan transitive dependencies.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Want to learn more about securing your SDLC and API security in future? Follow me or leave the comment! 🚀</span></p><p><br></p>",
      "image": "https://miro.medium.com/v2/resize:fit:700/1*lgv45QkKb6Hvv0y_PtRbTA.png",
      "viewCount": 0,
      "isPublished": true,
      "createdDate": "2023-09-05T22:19:17.9629743"
    },
    {
      "title": "The Architecture of a Modern Startup",
      "key": "the-architecture-of-a-modern-startup",
      "description": "Hype wave, pragmatic evidence vs the need to move fast",
      "content": "<p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The Tech side of startups can sometimes be very fluid and contain a lot of unknowns. What tech stack to use? Which components might be&nbsp;overkill&nbsp;for now but worth keeping an eye on in the future? How to balance the pace of business features development while keeping the quality bar high enough to have a maintainable codebase?</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Here I want to share our experience building&nbsp;</span><a href=\"https://cleanbee.syzygy-ai.com/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">https://cleanbee.syzygy-ai.com/</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;from the ground up — how we shaped our processes based on needs and how our processes evolved as we extended our tech stack with new components.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Businesses want to conquer the market and engineers — try cool stuff and stretch their brains. Meanwhile, the industry produces new languages, frameworks, and libraries in such quantities that you will not be able to check them all. And, usually, if you scratch the shiny surface of the Next Big Thing, you will find a good old concept. Good, if you are lucky.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">One of the most exciting topics to argue about is the processes — whether you rely on&nbsp;</span><a href=\"https://trunkbaseddevelopment.com/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">trunk-based development</a><span class=\"ql-size-large ql-font-monospace\">, prefer a more monstrous&nbsp;</span><a href=\"https://www.endoflineblog.com/gitflow-considered-harmful\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">GitHub flow</a><span class=\"ql-size-large ql-font-monospace\">, are a fan of&nbsp;</span><a href=\"https://www.agilealliance.org/glossary/mob-programming/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">mobbing</a><span class=\"ql-size-large ql-font-monospace\">, or find it more efficient to spend time in&nbsp;</span><a href=\"https://trunkbaseddevelopment.com/short-lived-feature-branches/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">PR-based</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;code reviews.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">I have experience working in an environment where artifacts were thrown away on users without any standardized process. In case of issues, developers had a lot of fun (nope!) trying to figure out what version of components was actually deployed.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">On another spectrum is the never-ending queue to CI. After you create PR you have to entertain yourself in the nearest 30 minutes by betting whether the CI cluster will find a resource to run tests over your changes. Sometimes the platform team introduces new, exciting, and useful features that might break compatibility with existing boilerplate for CI. These may result in failing all your checks at the last minute, after an hour of waiting.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">I strongly believe that, as usual, it all depends on team maturity, the kind of software you are building, and various business constraints, for example, the existence of&nbsp;</span><a href=\"https://about.gitlab.com/handbook/engineering/error-budgets/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">error’s budget</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;and the importance of&nbsp;</span><a href=\"https://enkonix.com/blog/time-to-market/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">time-to-market</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;versus&nbsp;</span><a href=\"https://cloud.google.com/blog/products/devops-sre/sre-fundamentals-sli-vs-slo-vs-sla\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">SLXs</a><span class=\"ql-size-large ql-font-monospace\">.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">I think what is important is to have some agreed processes in place that everyone is aware of and follows. It’s also important to have the bravery to challenge and change it if there is evidence of a better alternative.</span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Start Shaping the Process</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">What we have at the start:</span></p><p class=\"ql-align-center\"><br></p><ul><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">less than a dozen developers — in-house team and temporary contractors who want to and&nbsp;</span><a href=\"https://about.gitlab.com/company/culture/all-remote/asynchronous/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">can work asynchronously</a></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">completely greenfield project — no single line of code has been written yet. Requirements are vague, but they already started shaping into something</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">tech-wise — the clear need for a backend that should talk with mobile clients</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">some simple web frontend — static pages should be enough! (nope)</span></li></ul><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">We have started simple — code at GitHub and a PR-based flow with a single requirement — to have tickets splittable to be delivered in 1–3 days. This required some practice of&nbsp;</span><a href=\"https://www.thoughtworks.com/en-de/insights/blog/slicing-your-development-work-multi-layer-cake\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">story slicing</a><span class=\"ql-size-large ql-font-monospace\">, and it seems that a sense of visible fast progress is shown through the ability to move tickets to&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">Done</code><span class=\"ql-size-large ql-font-monospace\">. This can be a great motivational factor for the team to onboard that idea.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Linters and static analyzers to skip exciting discussions, such as how many arguments per method are too much (6!). We’ll gradually add auto-tests. We also try&nbsp;</span><a href=\"https://codescene.com/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">codesense</a><span class=\"ql-size-large ql-font-monospace\">. They have a very promising approach to highlighting&nbsp;</span><a href=\"https://codescene.io/docs/guides/technical/hotspots.html\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">important parts of code</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;(those bits that changed frequently and should definitely have a higher maintainability bar!) and identifying&nbsp;</span><a href=\"https://codescene.com/blog/bumpy-road-code-complexity-in-context/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">complexity</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;by looking at the level of nestness in the code. It is probably a bit expensive for startups initially, but 100% provides decent hints for engineers.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">On the architecture side of things, there was a temptation to dive deep into the wonderland of microservices. But looking at&nbsp;</span><a href=\"https://www.divante.com/blog/10-companies-that-implemented-the-microservice-architecture-and-paved-the-way-for-others\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">horrifying diagrams</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;of connections between them from big players, the need to&nbsp;</span><a href=\"https://www.splunk.com/en_us/data-insider/what-is-distributed-tracing.html\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">trace requests between</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;them, it really seems a suicidal approach for teams in the early stage that want to move fast.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Analysis of requirements allow us to detect three groups of job:</span></p><ul><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">core API with usual CRUD-like activities</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">search and recommendations</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">temporary workload that does something useful according to schedule (almost at a time with casual delays is OK)</span></li></ul><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/0*d--YowWxj3b_d4r8.png\" height=\"405\" width=\"700\"></span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Choice of tech stack: situations when the time is a bit limited, and expectations are high.&nbsp;</span><a href=\"https://boringtechnology.club/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">Use what you know and master</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;(yeah, maybe for someone, it is&nbsp;</span><a href=\"https://mcfunley.com/choose-boring-technology\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">boring technology</a><span class=\"ql-size-large ql-font-monospace\">). Hence, Fastapi, REST, stateless, Python, redis, and Postgres are our best friends (Yeah, we like Go and Rust, but we need to pay our dues a bit more!).</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">With mobile clients, the situation was a bit different. We foresaw a lot of screens with states and interactions with remote services but not too much custom, platform-specific tweaking. Hence, the idea of having a single codebase for iOS and Android was very appealing.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Nowadays, the choice of frameworks is really&nbsp;</span><a href=\"https://appinventiv.com/blog/cross-platform-app-frameworks/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">wide</a><span class=\"ql-size-large ql-font-monospace\">, but again, due to some experience with Flutter, we decided to give it a go. Within mobile development, one of the important aspects to better decide on is state management. Here, you will have a nice abundance of acronyms to be puzzled about from various languages and frameworks. Some include&nbsp;</span><a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">MVC</a><span class=\"ql-size-large ql-font-monospace\">,&nbsp;</span><a href=\"https://medium.com/@buttonsrtoys/flutter-state-management-with-mvvm-1b55e6911975\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">MVVM</a><span class=\"ql-size-large ql-font-monospace\">,&nbsp;</span><a href=\"https://www.kodeco.com/8440907-getting-started-with-the-viper-architecture-pattern\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">VIPER</a><span class=\"ql-size-large ql-font-monospace\">,&nbsp;</span><a href=\"https://www.kodeco.com/24550178-getting-started-with-the-composable-architecture\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">TCA</a><span class=\"ql-size-large ql-font-monospace\">,&nbsp;</span><a href=\"https://github.com/uber/RIBs/wiki\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">RIBs</a><span class=\"ql-size-large ql-font-monospace\">,&nbsp;</span><a href=\"https://bloclibrary.dev/#/coreconcepts\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">BLOC</a><span class=\"ql-size-large ql-font-monospace\">,&nbsp;</span><a href=\"https://docs.flutter.dev/development/data-and-backend/state-mgmt/options\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">etc</a><span class=\"ql-size-large ql-font-monospace\">.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Our motto starts with the most simple (*) solutions sufficient to support the necessary functionality. (*) Simple. Well, let’s put it this way, we think we understand it.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">However, we definitely made a mistake after building MVP because we decided to build on top instead of&nbsp;</span><a href=\"https://errolhassall.com/blog/2019/11/2/why-you-need-to-throw-away-your-mvp\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">throwing it away</a><span class=\"ql-size-large ql-font-monospace\">. Hence, on one wonderful (nope!) sunny day, I questioned my sanity: after I commented out code, cleaned all possible caches, and still didn’t see my changes on a new screen. Yeah, the&nbsp;</span><a href=\"https://wiki.sei.cmu.edu/confluence/display/c/MSC07-C.+Detect+and+remove+dead+code\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">dead code</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;should be removed!</span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Start Building!</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">After those initial formalities were settled, the next necessary thing was to be able to check client-server interactions.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">API&nbsp;</span><a href=\"https://en.wikipedia.org/wiki/Design_by_contract\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">contract</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;is a great thing, but it will be much more obvious that something is wrong when a real server throws you a “schema validation error” or miserably fails with an HTTP 500 error code.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Backend services were initially split into two groups — API monolith and Search and Recommender. The first contains more or less straightforward logic to interact with DB, and the second contains CPU-intensive computations that might require specific hardware configuration. Every service has its own scalability group.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">As we were still thinking about the rollout strategy (and arguing which domain to buy), the solution was simple: to minimize the struggles of mobile engineers in dealing with the backend, i.e., the alien stack. Let’s pack everything into docker.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">When we prepare everything to be deployable locally — mobile engineers can run docker-compose commands and have everything ready (after a few painful attempts that reveal flaws in documentation, but the real value of such exercises is to react to every “WTF!” and improve it).</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">`Everything` is good, but what is the point of an API running on top of an empty DB? Manually entering necessary data shortly leads to depression (and the risk of increasing the duration of development cycles). Hence, we prepared a curated dataset that was inserted into the local DB to be able to play with. We also started using it for auto-tests. Win-win! Auth becomes less problematic in defining testing scenarios when you have dozens of dummy users with similar passwords!</span></p><p class=\"ql-align-center\"><br></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Try new things or choose third-party providers</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Dealing with new technology is always a bit dangerous. You and your team can’t know everything (and sometimes things that you think you know can full you, but that’s another story). And still, it is often required to assess and investigate something no one has touched.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Payments, email, chat, SMS, notifications, analytics, etc. Every modern application usually represents business logics glued with several third-party providers.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Our approach to choosing with whom we work — time-capped, try-to-build-with-it activities to try the most promising one chosen by features, supported languages, and, in the case of providers, pricing.</span></p><p class=\"ql-align-center\"><br></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">How did we get into Terraform?</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The backend, a part of the DB, also should have some object/file storage. Sooner or later, we also should have DNS so that our services are ready to play with the big cruel world.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The choice of cloud provider was purely based on existing expertise within the team. We already use AWS for other projects, so we decided to stick with it. For sure, it is possible to do everything in the AWS console, but as times go, things become a classic big ball of mud that everyone is terrified to touch, and no one remembers why this bit exists at all.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">OK, seems the paradigm of&nbsp;</span><a href=\"https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">infrastructure as code</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;can be handy here.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Tooling-wise, choices are not so big — vendor-specific (AWS&nbsp;</span><a href=\"https://aws.amazon.com/ru/cloudformation/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">Cloud formation</a><span class=\"ql-size-large ql-font-monospace\">, Google Cloud (</span><a href=\"https://cloud.google.com/deployment-manager/docs\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">Deployment Manager</a><span class=\"ql-size-large ql-font-monospace\">,&nbsp;</span><a href=\"https://learn.microsoft.com/en-us/azure/automation/overview\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">Azure Automation</a><span class=\"ql-size-large ql-font-monospace\">),&nbsp;</span><a href=\"https://www.terraform.io/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">terraform</a><span class=\"ql-size-large ql-font-monospace\">, and its&nbsp;</span><a href=\"https://www.pulumi.com/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">rivals</a><span class=\"ql-size-large ql-font-monospace\">.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Based on experience with terraform… you already got an idea of how we choose things?</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Yeah, the initial setup will take some time (and without control can easily become the same big ball of mud in TF as well), but at least it will have some documentation over infrastructure and visibility of WHY it is there. Another major advantage, whatever you manage through TF, will be updated automatically (well, when you or CI/CD run corresponding commands)</span></p><p class=\"ql-align-center\"><br></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Secrets management</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">For AWS itself, given we run everything inside AWS, we can rely on&nbsp;</span><a href=\"https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">IAM</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;and&nbsp;</span><a href=\"https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">assumed roles</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;by attaching necessary policies to our VMs. But we need integration with third-party services and some way to pass some secrets to our apps, for example, passwords for DB. We need some solution for secret management. AWS has&nbsp;</span><a href=\"https://aws.amazon.com/kms/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">KMS</a><span class=\"ql-size-large ql-font-monospace\">, GitHub actions have&nbsp;</span><a href=\"https://docs.github.com/en/actions/security-guides/encrypted-secrets\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">their own secrets</a><span class=\"ql-size-large ql-font-monospace\">, and apart from it, there are a bunch of other providers. So, the real question is: what do you need from secret management:</span></p><p class=\"ql-align-center\"><br></p><ul><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">audit</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">path-based access</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">integration with Kubernetes</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">ability to issue temporary credentials</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Web UI</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Free</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">secrets versioning</span></li></ul><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">KMS was very handy, and we managed to add it into GitHub actions, but the UI of&nbsp;</span><a href=\"https://www.vaultproject.io/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">vault</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;and the ability to use it for free (if you run it by yourself) was a kind of deal breaker on this matter.</span></p><p class=\"ql-align-center\"><br></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Path to Kubernetes</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">And once we have dockerized the app, we have started considering Kubernetes as it offers a few goodies out of the box. The most important one is to be able to spin up the necessary amount of pods to meet performance demands and the ability to define all your needs in a declarative fashion. So, given a sufficient level of automation, no human being should run&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">kubectl apply</code><span class=\"ql-size-large ql-font-monospace\">. AWS has EKS to start with that can be managed via terraform.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">On the other hand, a steep learning curve (to grasp the idea that it is exactly defined what should be up and running) and a bit of specific tooling to play with were fair reasons to think about it twice.</span></p><p class=\"ql-align-center\"><br></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Helm charts</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">If we talk Kubernetes and already have docker apps released on every merge to main, helm charts become the next step in adapting modern infrastructure stack. We have plugged AWS ECR to keep track of every new release and publish helm charts in dedicated S3 buckets that become our internal helm chart registry.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Plugging it all together was not as straightforward as expected. Kubernetes nodes initially can’t connect to ECR and pull necessary docker images, terraform modules (</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">aws-ssm-operator</code><span class=\"ql-size-large ql-font-monospace\">) intended to work with secrets in AWS KMS were deprecated and didn’t support recent Kubernetes API, secrets, and config maps weren’t in the mood to be exposed into pods.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The first rollout of services brings happiness to mobile folks — no need to care about instructions for local setup! The initial week or so, though, it was not really stable, but then, one less thing to care about.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Do you need all of it? Not necessary.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">I must admit, this mix — Kubernetes with vault via terraform and helm — are probably not for everyone, and you most likely will not need it in the initial stage. Simple docker push to ECR on merge to main and doing ssh into ec2&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">&amp;&amp; docker pull &amp;&amp; docker-compose</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;stop-start during release from CICD can work well (at least for a happy path). It will be clear for everyone at first glance. That’s exactly how we redeploy&nbsp;</span><a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-custom-domain-walkthrough.html\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">our static websites</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;at the moment. We can focus on the ci build’s new version and copy it into the corresponding s3 bucket.</span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Maturing the Infrastructure</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">AWS is nice enough to offer credits for those who are wild enough to explore the shady paths of the startup world. Can we use it to save a few bucks on GitHub minutes and expose fewer secrets and infrastructure to GitHub VMs?</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">How about self-hosted runners, i.e., when you open a PR, it is not GitHub VMs, but your own Kubernetes that’s allocated a pod to run your CI checks? Sure, it is difficult to prepare everything for iOS releases (more about it below), but Android and the backend should surely work on good old Linux?!</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">We have built it via dedicated&nbsp;</span><a href=\"https://registry.terraform.io/modules/DNXLabs/eks-github-runner/aws/latest\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">k8s pods</a><span class=\"ql-size-large ql-font-monospace\">, but there is also an option to run checks on&nbsp;</span><a href=\"https://github.com/philips-labs/terraform-aws-github-runner\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">on-spot EC2 instances</a><span class=\"ql-size-large ql-font-monospace\">.</span></p><p class=\"ql-align-center\"><br></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Observability and Co</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">There is a lot of marketing fluff around terms like monitoring and alerting.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">In some companies, those things are implemented just for bragging, “We have X for that!”. However, engineers are still blind to what is happening with their production when there are real issues or alerts channels have to be muted as it contains nonactionable noise.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">And I must say, we still have a looong way to go.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The first thing you will find as soon as you search for that kind of solution is&nbsp;</span><a href=\"https://www.elastic.co/what-is/elk-stack\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">ELK stack</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;and a bunch of paid providers. After measuring the time and effort to maintain our own setup, I started thinking a paid solution might be worth it. If and only if you really can delegate the burden of squeezing the most important info about your apps and state of infrastructure to existing solutions. It all depends on whether they have a preset of metrics, log parsers, and index mapping that you can easily adapt to your project.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">For logging, currently, we rely on&nbsp;</span><a href=\"https://github.com/elastic/helm-charts\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">ELK</a><span class=\"ql-size-large ql-font-monospace\">. Yeah, it is more or less straightforward to set up, and most likely, some people find the query language of elastic very convenient to use daily.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Here we are still exploring options, as it seems that old good&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">kubectl logs</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">grep</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;produce insights for questions like “What is the last error from&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">app1</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;pods ” in a much more timely fashion without being lost among endless UI controls. But most probably, the UI of Kibana still hides the levers we should pull to add a proper ingestion pipeline and choose the corresponding mapping for the elastic index for filebeat.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">For alerting, we set up&nbsp;</span><a href=\"https://github.com/prometheus-community/helm-charts\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">prometheus</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;and integrate it into Slack. Again, mainly because we have experienced it before.</span></p><p class=\"ql-align-center\"><br></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Now, why do we need Azure?!</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">As usually happens when products evolve, new requirements introduce new kinds of things:</span></p><p class=\"ql-align-center\"><br></p><ul><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">now, part of having something publicly visible, we need some resources available for the team only</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">to manage feature flags, access vault UI, or struggle with elastic to figure out the last API error</span></li></ul><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Sure, there are&nbsp;</span><a href=\"https://www.cloudflare.com/products/zero-trust/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">paid solutions</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;for that, or you can mix some&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-size-large ql-font-monospace\">Identity</code><span class=\"ql-size-large ql-font-monospace\">&nbsp;as a service provider (Azure active directory) for authentication of your teammates with any VPN providers. We chose&nbsp;</span><a href=\"https://openvpn.net/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">OpenVPN</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;due to their free tiers and expose necessary services to the internal network only so those who should log in using their credentials. It has one clear advantage compared to using AWS stack — it is free (for a limited number of connections).</span></p><p class=\"ql-align-center\"><br></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">OK, why do we need Google Cloud?</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">So far, we have mainly discussed the backend part of things. But there are more. The thing that you see first — mobile apps! Flutter or something else must also be built, linted, and tested. And published somehow somewhere, so stakeholders can immediately be in awe of the new features (and find new bugs).</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">For rolling out to the production, you would need to pass through a bunch of formalities (screenshots, change log = what’s new, review) that will delay your audience from enjoying those art pieces.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">I must say that the API of stores is not really friendly for frequent release. When you build and sign an app, publishing can take 15+ min. As with every other API, the API of app stores may and will fail sooner or later. Yes, and signing might be a nightmare as it differs between platforms. And it would be nice if engineers didn’t waste time on all of those things preparing releases from their laptops.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The first (and probably single?) thing that you should consider is&nbsp;</span><a href=\"https://fastlane.tools/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">fastlane</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;— initially, I did have some prejudice with all those new terms like&nbsp;</span><a href=\"https://en.wikipedia.org/wiki/RubyGems\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">gems</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;(like that name, though!) and&nbsp;</span><a href=\"https://bundler.io/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">bundle</a><span class=\"ql-size-large ql-font-monospace\">, but it works. To run them from CI, some efforts will be required to deal with secrets&nbsp;</span><a href=\"https://developer.android.com/studio/publish/app-signing#sign_release\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">jks</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;for Android or&nbsp;</span><a href=\"https://docs.fastlane.tools/actions/match/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">match</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;for iOS.</span></p><p class=\"ql-align-center\"><br></p><h2 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Towards the “dark” side</span></h2><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Next, you will start thinking about app distribution:&nbsp;</span><a href=\"https://developer.apple.com/testflight/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">testflight</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;is a handy tool for the iOS world, but what about Android? We ended up using App Distribution — a solution from&nbsp;</span><a href=\"https://firebase.google.com/products/app-distribution\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">Firebase</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;— mainly because it worked for us after the first try. But there are&nbsp;</span><a href=\"https://testfairy.com/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">other</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;options (that claim to be working for both platforms).</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">What is important is that you can do everything from fastlane! Even when your app evolves and you start adding various extras — analytics, chats, maps, geo — many were from Google directly of Firebase. As Firebase offers many goodies, it was natural to collect analytical events, and after a few tweaks with their IAM policy, we set up the export of raw events into gs-buckets to be able to play with BigQuery.</span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Prod vs Staging — The Great Split!</span></h1><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/0*vcK8iLuvJHnByyt4.jpg\" height=\"278\" width=\"700\"></span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">For backend, we have auto-tests right from the start. Various practices like test double prove quite efficient to prevent regressions even in complex business logic with integrations from side services. On the mobile side, we were a bit limited due to the coexistence of code from MVP, and auto-tests were not so helpful for complex business scenarios like someone wanting to use our services but we couldn’t charge their bank card.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Manual testing was very time-consuming and error-prone, especially when business logic dynamically evolved and the state of data in the database after recent updates became become impossible from the point of view of domain rules.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Yeah, so it would be nice to run e2e tests by clicking through the app with data that we are maintaining (and sure that it is valid). It would be nice if those tests didn’t pollute the actual database, S3 buckets, and third-party providers.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">We started with a single main branch and a single environment (rds, redis, k8s namespace, and s3) used by the first testers and developers. We were not exposed to the public, but as we moved closer and closer to release, it became clear that some kind of distinction is necessary for places where we can break things and have a stable environment.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">In mobile applications, changing the API’s URL during building was a matter. On the backend, a few aspects have to be done to support deploy-specific configurations: infrastructure-wise, by creating dedicated policies and resources and parameterized a few bits in the code where specific URLs were expected. Apart from it, there are several repositories, some of them independent but some are dependent — as in cases of shared functionality.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Do you know what will happen when you update shared functionality without immediate redeployment and testing all dependent apps? After a few days, when you completely forget about it, you make some innocent — purely cosmetic changes somewhere else in the dependent repo that will lead to redeployment and pull the latest dependency.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Surely, during an important dem or right after it, you would see some stupid errors related to a lack of compatibility for a single condition that you forgot to double-check.</span></p><ol><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">So, the first important consideration for splitting the environment — automate the overall rollout of all dependent applications if some base repo was updated. You may ask the team to do it, and everyone agrees but forget to run the pull.</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The second aspect — what do we need to deploy? Do we need to maintain all apps in every environment, including temporary jobs responsible for sending emails or notifications? Seems some flags to include or exclude jobs into deployment might be helpful.</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">E2E, and later, probably Staging not necessary, should be reachable by everyone on the internet.</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Promoting new releases to e2e and staging have to be automated</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Promoting new releases to prod, at least now, better have controlled and manual</span></li></ol><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Currently, we have three ends, which fulfill all the things above:</span></p><ul><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">E2E — an environment where integration tests will be run on curated data to ensure base functionality is still in place</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Staging — where core development is happening and where beta testers can try to break what we build</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Prod — that happy to greet new users</span></li></ul><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">The Kubernetes cluster is still a single one. Everything was split on the namespace level. A similar thing happened with RDS, where several databases co-living together in an RDS instance.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\"><img src=\"https://miro.medium.com/v2/resize:fit:700/0*cVf6AfJmOusTFMTa.png\" height=\"654\" width=\"700\"></span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">On the side of automation of mobile testing, the choice is not really big. You first have to choose whether you will use any device-in-the-cloud provider or run tests by yourself.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">You can certainly plug a smartphone into a laptop and run tests, but wouldn’t it be nice (and right!) if CI did it instead? When you start considering vendors that provide emulators and real devices to play with, you will find the choice of testing framework for mobile is not wide, but that the second choice you have to make (and the choice of provider might limit you here). Another important consideration — is there specific hardware requirements, i.e., using GPU or npu? Hence, any emulator was sufficient for us.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">We identify two main options for the mobile e2e testing framework —&nbsp;</span><a href=\"https://docs.flutter.dev/cookbook/testing/integration/introduction\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">Flutter integration tests</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;and&nbsp;</span><a href=\"https://appium.io/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">appium-based pytests</a><span class=\"ql-size-large ql-font-monospace\">. Firebase Test Lab supported Flutter integration tests, although it required some tweaking to allow requests from their IP ranges (VM with running emulators) to reach our E2E API.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Appium, part of the Python API, was very promising, as it was like using something like a&nbsp;</span><a href=\"https://testproject.io/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">testproject</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;(you guys rock!). You can record all the clicks through the application per scenario. Hence, it doesn’t require specific programming knowledge, but it allows you to learn it gradually). So far, Appium is much more comprehensive in our setup regarding scenario coverage.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">E2E tests have one tiny (nope!) issue — the cold start of the app in an emulator is not very fast. If we add the time necessary to build the app and the duration of copying the debug build to the provider on top of it, it becomes a real bottleneck of moving fast.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">So far, we have experimented with running them twice in a day, but let’s see how it is going.</span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">What’s Next?</span></h1><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">Many interesting tasks are still on our todo list:</span></p><p class=\"ql-align-center\"><br></p><ul><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">On the infrastructure side — performance testing, security testing, trying out Flutter for web</span></li><li class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">On the development side — serving and updating ML models for recommendation engine, prediction of cleaning duration, building cache with feature vector for recommendations, intermixing&nbsp;</span><a href=\"https://en.wikipedia.org/wiki/Optimization_problem\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-size-large ql-font-monospace\">optimisation problems</a><span class=\"ql-size-large ql-font-monospace\">&nbsp;to match the engine, and scheduling jobs and game theory</span></li></ul><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">And most important, nothing can replace real-world usage.</span></p><p class=\"ql-align-center\"><span class=\"ql-size-large ql-font-monospace\">You’ll see many wild things only when you start collecting real data about user behavior, so we are looking forward to the upcoming launch!</span></p>",
      "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/0*Ps0lgic20e019ANd.png",
      "viewCount": 0,
      "isPublished": true,
      "createdDate": "2023-09-05T22:16:38.8191982"
    },
    {
      "title": "10 essential VS Code tips & tricks",
      "key": "10-essential-vs-code-tips-&-tricks",
      "description": "Lets talk it!",
      "content": "<p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*HvlAecY7g3InBxrXby4emA.png\" height=\"369\" width=\"700\"></span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Did you know that&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">73%</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;of developers worldwide depend on the same code editor?</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Yes, the 2023 Stack Overflow Developer Survey results are in, and yet again, Visual Studio Code was by far&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">the most used development environment</strong><span class=\"ql-font-monospace ql-size-large\">.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:676/0*KQ1pKWckt_pq5UOm.png\" height=\"549\" width=\"676\"></span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">“Visual Studio Code remains the preferred IDE across all developers, increasing its use among those learning to code compared to professional developers”, survey.stackoverflow.co/2023</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">And we all know why: it’s awesome.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">But are we fully exploring its potential? In this article, we unfold some compelling VS Code features that&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">enhance productivity</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;with local source control, animated typing, and rapid line deletion, amongst others. Let us start using them to&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">achieve our coding goals faster</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;than ever.</span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">1. Timeline view: local source control</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">The Timeline view gives us built-in source control.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Many of us know how useful Git and other source control tools are, helping us easily&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">track file changes and revert back to a previous point</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;when needed.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">So the Timeline view in VS Code provides an automatically updated timeline of important events related to a file, such as Git commits, file saves, and test runs.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:619/0*wJjA1YRRODizS0Bu.png\" height=\"348\" width=\"619\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Expand this view to see a&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">list of snapshot of events&nbsp;</strong><span class=\"ql-font-monospace ql-size-large\">related to the current file. Here it’s file saves, but also Git commits where the file was staged.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:539/0*IAgXFv3NdiWywrOA.png\" height=\"453\" width=\"539\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Hover over the snapshot item to&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">view the date and time</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;when VS Code made the snapshot.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:516/0*FvtbTkD2HcPZiUOe.png\" height=\"458\" width=\"516\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Select a snapshot item to&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">see a diff view</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;showing the changes between the file at the snapshot time and the file presently.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:700/1*HvlAecY7g3InBxrXby4emA.png\" height=\"369\" width=\"700\"></span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">2. Autosave: no more Ctrl + S</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Can you count how many times you’ve used this shortcut? You probably do it unconsciously now.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">The Autosave feature&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">automatically</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;saves files as we work on them,&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">removing the need for manual saving</strong><span class=\"ql-font-monospace ql-size-large\">. With autosave, we eliminate Ctrl + S fatigue,&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">save time</strong><span class=\"ql-font-monospace ql-size-large\">, and gain certainty of always working with the latest changes to the files.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">It’s not perfect though, and it’s up to you to weigh the pros and cons — which we comprehensively cover&nbsp;</span><a href=\"https://codingbeautydev.com/blog/autosave-pros-cons/?utm_source=medium&amp;utm_campaign=blog&amp;utm_medium=social\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\">here</a><span class=\"ql-font-monospace ql-size-large\">.</span></p><p class=\"ql-align-center\"><br></p><h2 class=\"ql-align-center\"><a href=\"https://codingbeautydev.com/blog/autosave-pros-cons/?utm_source=medium&amp;utm_campaign=blog&amp;utm_medium=social&amp;source=post_page-----98c6e2258626--------------------------------\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\">Stop Autosaving Your Code</a></h2><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:445/0*Ps7uYJiZ34UWcIYp.gif\" height=\"259\" width=\"445\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">No autosave.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:445/0*N112U4ZjLd3Hqzro.gif\" height=\"259\" width=\"445\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Autosave enabled — the unsaved indicator no longer shows.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Use&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">File &gt; Auto Save</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;to enable the feature easily.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:338/0*jwYVvAgeDzFl9Q86.png\" height=\"721\" width=\"338\"></span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">3. Do anything with Command Palette</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Almost anything you do in VS Code apart from typing is a “Command”.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Commands let us&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">accomplish tasks within the editor</strong><span class=\"ql-font-monospace ql-size-large\">, and they include file-related commands, navigation commands, editing commands, and terminal commands, each optimally designed to enhance different aspects of your editing experience.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">So with Command Palette we simply search for a command and select to perform the associated action.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">To&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">open the Command Palette</strong><span class=\"ql-font-monospace ql-size-large\">, use this keyboard shortcut:</span></p><ul><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Windows/Linux:&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + Shift + P</strong></code></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Mac:&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">Shift + Command+ P</strong></li></ul><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:679/0*Zp1D1eaoGKavUXzl.png\" height=\"401\" width=\"679\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">As you guessed correctly, those keyboard shortcuts to the right are a faster way to run the commands with the keyboard.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">The&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">key benefit of the Command Palette</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;over shortcuts is when there’s a command without a shortcut, or you’re looking for a command you’re not sure exists.</span></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">4. Go to file quickly</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">The mouse is too slow.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Yes, you can click on the file in the Explorer pane, but for a much faster alternative&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">use&nbsp;</strong><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + P</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;to search for and open a specific file in your project.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:660/0*qRnKmjNYIoYfCNOV.png\" height=\"390\" width=\"660\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Hold&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">Ctrl</code><span class=\"ql-font-monospace ql-size-large\">&nbsp;and press&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">Tab</code><span class=\"ql-font-monospace ql-size-large\">&nbsp;to cycle through the list of files currently open in an editor instance.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:686/0*RGHh9w0JEn037x94.gif\" height=\"372\" width=\"686\"></span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">You can even use&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">Alt + Left</code><span class=\"ql-font-monospace ql-size-large\">&nbsp;and&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">Alt + Right</code><span class=\"ql-font-monospace ql-size-large\">&nbsp;to quickly navigate between these open files.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">All these are much faster ways to get to a file than using the cursor.</span></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">5. Go to line quickly</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Jump, don’t scroll.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Quickly navigating to a line is&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">invaluable during debugging</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;when you need to encounter errors at specific line numbers. By jumping to those lines, you can examine the code in that particular context, evaluate variables, and troubleshoot the issue.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Use the&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + G</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;keyboard shortcut for this.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:700/0*01amyiUxpywnHBCl.gif\" height=\"490\" width=\"700\"></span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">6. Delete line quickly</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">You’ve got to the line now, what if you want to delete it?</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Will you drag and drag to highlight and then press Delete? Will you tirelessly press Backspace until every character is gone?</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Or, will you&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">use the&nbsp;</strong><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + Shift + K</strong></code><strong class=\"ql-font-monospace ql-size-large\">&nbsp;shortcut</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;to rapidly delete that and dozens more lines in a matter of seconds?</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:442/0*e_H3abUA_CtxWSDP.gif\" height=\"519\" width=\"442\"></span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">7. Enjoy typing with smooth cursor</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">VS Code has this smooth cursor feature that animates the cursor as it moves, like in MS Word. This makes typing feel more&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">fluid and polished</strong><span class=\"ql-font-monospace ql-size-large\">, as well as giving us a&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">smoother and more natural feel</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;as we navigate through the lines of code and place the cursor at different points.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:642/0*uvHHZLxorSThmumN.gif\" height=\"376\" width=\"642\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">To turn it on, open Settings UI in the Command Palette and search for “smoot caret”.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">We are looking for the&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Editor: Cursor Smooth Caret Animation</strong></code><strong class=\"ql-font-monospace ql-size-large\">&nbsp;setting</strong><span class=\"ql-font-monospace ql-size-large\">, which has 3 possible options:</span></p><p class=\"ql-align-center\"><br></p><ol><li class=\"ql-align-center\"><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>off</strong></code><span class=\"ql-font-monospace ql-size-large\">: No smooth cursor animation</span></li><li class=\"ql-align-center\"><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>explicit</strong></code><span class=\"ql-font-monospace ql-size-large\">: Only animates the cursor when we explicitly place it somewhere in the code.</span></li><li class=\"ql-align-center\"><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>on</strong></code><span class=\"ql-font-monospace ql-size-large\">: Smooth cursor animation is always enabled - including when typing.</span></li></ol><p class=\"ql-align-center\"><strong class=\"ql-font-monospace ql-size-large\">Set it to&nbsp;</strong><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>on</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;to get the full visual experience.</span></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">8. Format code rapidly</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Formatting is all about&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">improving code readability</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;by organizing it in a structured and consistent manner.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">And if you’ve been doing this manually, you need to know that there’s a better way.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Yes, you need to start formatting code automatically with the&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Format Document</strong></code><strong class=\"ql-font-monospace ql-size-large\">&nbsp;command</strong><span class=\"ql-font-monospace ql-size-large\">, easily accessible in the Command Palette. Depending on the current file's language, a particular \"default\" formatter will be used to format the code using various rules of indentation, line length, braces and brackets, etc.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:669/0*n9erG7Yci2Yop6R2.png\" height=\"309\" width=\"669\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">While there’s a pretty decent built-in JS/TS formatter, for a more robust solution, I highly recommend the&nbsp;</span><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><strong>Prettier extension</strong></a><span class=\"ql-font-monospace ql-size-large\">.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:527/0*K3qSvRJqD8ve69nx.gif\" height=\"323\" width=\"527\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:700/0*brl5fHYJUV88PGbj.png\" height=\"370\" width=\"700\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">After installing, you’ll set it as your default formatter.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">When you use manual over autosave, there’s a feature you should enable to make formatting a bit easier:</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:568/0*iBNmVzoa3RSP1sJ5.png\" height=\"274\" width=\"568\"></span></p><ul><li class=\"ql-align-center\"><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Editor: Format On Save</strong></code><span class=\"ql-font-monospace ql-size-large\">: \"Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must be shutting down\". It is disabled by default.</span></li></ul><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">So with this setting on, VS Code will automatically format your code with the current default formatter when you save the file with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">Ctrl + S</code><span class=\"ql-font-monospace ql-size-large\">, as you saw in the above demo.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:527/0*UvSMQxqdlDFmVhT_.gif\" height=\"323\" width=\"527\"></span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">When you do autosave,&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">Format On Save</code><span class=\"ql-font-monospace ql-size-large\">&nbsp;doesn’t work, and it can get tedious to continuously open the Command Palette when you’re formatting every now and then. And that’s what keyboard shortcuts are for:</span></p><ul><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Windows:&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">Shift + Alt + F</strong></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Mac:&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">Shift + Option + F</strong></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Linux:&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">Ctrl + Shift + I</strong></li></ul><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">I’m on Windows and personally, I don’t like this default keyboard shortcut; autosave makes me format every now and then, and&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">Shift + Alt + F got agonizing</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;after a while.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">So&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">I changed it to&nbsp;</strong><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + D, Ctrl + D</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;- a keyboard shortcut chord that's much easier to press and remember, and has no conflicting keybinding. I recommend you do the same.</span></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">9. Save time with multi-cursor editing</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">One of the&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">wow moments</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;in my earliest VS Code days, the multi-cursor editing lets you place multiple cursors at different points, and delete or insert the same text multiple times.&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">This speeds up editing time</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;and boosts productivity greatly, as we get repetitive tasks done efficiently with&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">rapid code creation</strong><span class=\"ql-font-monospace ql-size-large\">.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Of course, when editing, there’s always at least one cursor. Use&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Alt + Click</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;to add more.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:447/0*nINwKqOF3Lgn8qbk.gif\" height=\"355\" width=\"447\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">You can also easily add a cursor directly above or below the current line, with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + Alt + Down</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;or&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + Alt + Up</strong></code><span class=\"ql-font-monospace ql-size-large\">.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:424/0*tS_Q6FJCK7f_n0Ng.gif\" height=\"355\" width=\"424\"></span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">These shortcuts run the&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">Add Cursor Above</code><span class=\"ql-font-monospace ql-size-large\">and&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">Add Cursor Below</code><span class=\"ql-font-monospace ql-size-large\">commands respectively.</span></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">10. Create new folder / file quickly</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">There’s no serious project where we don’t create new folders and files, and if there was a way to&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">accelerate file/folder creation</strong><span class=\"ql-font-monospace ql-size-large\">, all the time saved would add up to give us a&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">significant productivity boost</strong><span class=\"ql-font-monospace ql-size-large\">.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">If you’ve been creating new files and folders in VS Code with the new file and new folder button, then yes, there is a way.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:289/0*9H3zbiJUyqX70pCa.gif\" height=\"338\" width=\"289\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Yeah, you don’t have to do this.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Instead of constantly moving your mouse to locate those small buttons, did you know you can just&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">double-click on the Explorer panel</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;to create a new file?</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:291/0*eLRSXH9TPLgBNIvX.gif\" height=\"335\" width=\"291\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">How about a new folder? Well, folders are nothing without files, and when you’re creating a new file, you can easily&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">use the&nbsp;</strong><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>/</strong></code><strong class=\"ql-font-monospace ql-size-large\">&nbsp;character to indicate a hierarchy</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;and create new folders and sub-folders to contain that file.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:291/1*l3bsmz3fSsM-3ZhUDptxoA.gif\" height=\"335\" width=\"291\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">The utils folder is created to contain index.js.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">It would be even more efficient to&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">use keyboard shortcuts</strong><span class=\"ql-font-monospace ql-size-large\">, which is what I did.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">As a former Atom fan, I had quickly gotten used to the&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>A</strong></code><strong class=\"ql-font-monospace ql-size-large\">&nbsp;and&nbsp;</strong><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Shift + A</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;shortcuts for creating new files and folders respectively; I knew what I had to do.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:289/0*SC8Dbn68TAt7ftCn.gif\" height=\"338\" width=\"289\"></span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\"><img src=\"https://miro.medium.com/v2/resize:fit:501/0*3voP8N6gBG7X7Xl6.png\" height=\"322\" width=\"501\"></span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Since&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>A</strong></code><strong class=\"ql-font-monospace ql-size-large\">&nbsp;and&nbsp;</strong><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Shift + A</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;are obviously keys we code with, I included the&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">when</code><span class=\"ql-font-monospace ql-size-large\">&nbsp;values here to make sure they only create a new file/folder when the Explorer pane has focus and there's no active cursor in the current editor.</span></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">So to use these shortcuts when typing, you’ll have to focus on the explorer pane first; click on it, or use&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\">Ctrl/Command + Shift + E</code><span class=\"ql-font-monospace ql-size-large\">.</span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Key takeaways</span></h1><ul><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Enable local source control with&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">Timeline view</strong><span class=\"ql-font-monospace ql-size-large\">; available in Explorer pane by default.</span></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Autosave files with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>File &gt; Autosave</strong></code><span class=\"ql-font-monospace ql-size-large\">.</span></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Run commands in Command Palette with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + Shift + P</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;or&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Shift + Command + P</strong></code><span class=\"ql-font-monospace ql-size-large\">.</span></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Go to a file with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + P</strong></code><span class=\"ql-font-monospace ql-size-large\">, navigate between open files with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Alt + Left/Right</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;or&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + Tab</strong></code><span class=\"ql-font-monospace ql-size-large\">.</span></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Go to a line with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + G</strong></code><span class=\"ql-font-monospace ql-size-large\">.</span></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Delete a line with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + Shift + K</strong></code></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Enable smooth typing with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Editor: Cursor Smooth Caret Animation</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;setting.</span></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Format code with Format Document command, use&nbsp;</span><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\"><strong>Prettier</strong></a><span class=\"ql-font-monospace ql-size-large\">, change shortcut to&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Ctrl + D, Ctrl + D</strong></code></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Use multiple cursors at once with&nbsp;</span><code style=\"background-color: rgb(242, 242, 242);\" class=\"ql-font-monospace ql-size-large\"><strong>Alt + Click, Ctrl + Alt + Up/Down</strong></code><span class=\"ql-font-monospace ql-size-large\">&nbsp;adds one above/below</span></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Move a line up or down with&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">Alt/Option + Up/Down</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;in Windows/Mac</span></li><li class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Create a new file by double-clicking the Explorer pane or&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">set a custom keyboard shortcut</strong><span class=\"ql-font-monospace ql-size-large\">. Create a new file in a new folder with “</span><strong class=\"ql-font-monospace ql-size-large\">folder/file.ext</strong><span class=\"ql-font-monospace ql-size-large\">”</span></li></ul><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Check out the&nbsp;</span><a href=\"https://code.visualstudio.com/docs/getstarted/keybindings\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\">VS Code Key Bindings docs</a><span class=\"ql-font-monospace ql-size-large\">&nbsp;to learn more about keyboard shortcuts and how to customize them. It includes a complete list of all the&nbsp;</span><a href=\"https://code.visualstudio.com/docs/getstarted/keybindings#_default-keyboard-shortcuts\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: inherit;\" class=\"ql-font-monospace ql-size-large\">default VS Code shortcuts&nbsp;</a><span class=\"ql-font-monospace ql-size-large\">in your operating system.</span></p><p class=\"ql-align-center\"><br></p><h1 class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Final thoughts</span></h1><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">Visual Studio Code is more than just a text editor — it’s a powerful tool that, when mastered, can significantly&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">boost your productivity</strong><span class=\"ql-font-monospace ql-size-large\">&nbsp;and streamline your coding workflow. The ten tips and tricks we’ve explored are&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">just the tip of the iceberg</strong><span class=\"ql-font-monospace ql-size-large\">. As you continue to navigate through VS Code, you will discover a myriad of other features and shortcuts that will further enhance your coding experience.</span></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><span class=\"ql-font-monospace ql-size-large\">So, keep exploring, keep learning, and remember:&nbsp;</span><strong class=\"ql-font-monospace ql-size-large\">the key to efficient coding lies not just in the code itself</strong><span class=\"ql-font-monospace ql-size-large\">, but also in the tools you use to write it.</span></p>",
      "image": "https://miro.medium.com/v2/resize:fit:720/format:webp/1*HvlAecY7g3InBxrXby4emA.png",
      "viewCount": 0,
      "isPublished": true,
      "createdDate": "2023-09-05T22:11:49.322409"
    }
  ]